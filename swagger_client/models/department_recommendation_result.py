# coding: utf-8

"""
    ATIP AI Search API

    This API provides AI search functionalities: summary search and department recommendation.    Use the following code to authorize: ` nTsVPfUb89Ize/1DVSx2xKjLltOagND80lEfHaVB3fGT8CQEF7e9Lw== `  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: atip-support@lixar.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.department_recommendation import DepartmentRecommendation  # noqa: F401,E501


class DepartmentRecommendationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request': 'str',
        'timestamp': 'datetime',
        'results': 'list[DepartmentRecommendation]'
    }

    attribute_map = {
        'request': 'request',
        'timestamp': 'timestamp',
        'results': 'results'
    }

    def __init__(self, request=None, timestamp=None, results=None):  # noqa: E501
        """DepartmentRecommendationResult - a model defined in Swagger"""  # noqa: E501

        self._request = None
        self._timestamp = None
        self._results = None
        self.discriminator = None

        if request is not None:
            self.request = request
        if timestamp is not None:
            self.timestamp = timestamp
        if results is not None:
            self.results = results

    @property
    def request(self):
        """Gets the request of this DepartmentRecommendationResult.  # noqa: E501

        Topic we want information on  # noqa: E501

        :return: The request of this DepartmentRecommendationResult.  # noqa: E501
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this DepartmentRecommendationResult.

        Topic we want information on  # noqa: E501

        :param request: The request of this DepartmentRecommendationResult.  # noqa: E501
        :type: str
        """

        self._request = request

    @property
    def timestamp(self):
        """Gets the timestamp of this DepartmentRecommendationResult.  # noqa: E501

        Date the request was made  # noqa: E501

        :return: The timestamp of this DepartmentRecommendationResult.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DepartmentRecommendationResult.

        Date the request was made  # noqa: E501

        :param timestamp: The timestamp of this DepartmentRecommendationResult.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def results(self):
        """Gets the results of this DepartmentRecommendationResult.  # noqa: E501

        List of recommended departments  # noqa: E501

        :return: The results of this DepartmentRecommendationResult.  # noqa: E501
        :rtype: list[DepartmentRecommendation]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this DepartmentRecommendationResult.

        List of recommended departments  # noqa: E501

        :param results: The results of this DepartmentRecommendationResult.  # noqa: E501
        :type: list[DepartmentRecommendation]
        """

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepartmentRecommendationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
