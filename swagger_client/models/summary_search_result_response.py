# coding: utf-8

"""
    ATIP AI Search API

    This API provides AI search functionalities: summary search and department recommendation.    Use the following code to authorize: ` nTsVPfUb89Ize/1DVSx2xKjLltOagND80lEfHaVB3fGT8CQEF7e9Lw== `  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: atip-support@lixar.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.summary_document import SummaryDocument  # noqa: F401,E501


class SummarySearchResultResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_found': 'int',
        'start': 'int',
        'max_score': 'int',
        'docs': 'list[SummaryDocument]'
    }

    attribute_map = {
        'num_found': 'numFound',
        'start': 'start',
        'max_score': 'maxScore',
        'docs': 'docs'
    }

    def __init__(self, num_found=None, start=None, max_score=None, docs=None):  # noqa: E501
        """SummarySearchResultResponse - a model defined in Swagger"""  # noqa: E501

        self._num_found = None
        self._start = None
        self._max_score = None
        self._docs = None
        self.discriminator = None

        if num_found is not None:
            self.num_found = num_found
        if start is not None:
            self.start = start
        if max_score is not None:
            self.max_score = max_score
        if docs is not None:
            self.docs = docs

    @property
    def num_found(self):
        """Gets the num_found of this SummarySearchResultResponse.  # noqa: E501

        Number of reports found  # noqa: E501

        :return: The num_found of this SummarySearchResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """Sets the num_found of this SummarySearchResultResponse.

        Number of reports found  # noqa: E501

        :param num_found: The num_found of this SummarySearchResultResponse.  # noqa: E501
        :type: int
        """

        self._num_found = num_found

    @property
    def start(self):
        """Gets the start of this SummarySearchResultResponse.  # noqa: E501


        :return: The start of this SummarySearchResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SummarySearchResultResponse.


        :param start: The start of this SummarySearchResultResponse.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def max_score(self):
        """Gets the max_score of this SummarySearchResultResponse.  # noqa: E501


        :return: The max_score of this SummarySearchResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this SummarySearchResultResponse.


        :param max_score: The max_score of this SummarySearchResultResponse.  # noqa: E501
        :type: int
        """

        self._max_score = max_score

    @property
    def docs(self):
        """Gets the docs of this SummarySearchResultResponse.  # noqa: E501

        A list of existing ATIP reports  # noqa: E501

        :return: The docs of this SummarySearchResultResponse.  # noqa: E501
        :rtype: list[SummaryDocument]
        """
        return self._docs

    @docs.setter
    def docs(self, docs):
        """Sets the docs of this SummarySearchResultResponse.

        A list of existing ATIP reports  # noqa: E501

        :param docs: The docs of this SummarySearchResultResponse.  # noqa: E501
        :type: list[SummaryDocument]
        """

        self._docs = docs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummarySearchResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
