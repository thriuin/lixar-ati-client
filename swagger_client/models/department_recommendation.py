# coding: utf-8

"""
    ATIP AI Search API

    This API provides AI search functionalities: summary search and department recommendation.    Use the following code to authorize: ` nTsVPfUb89Ize/1DVSx2xKjLltOagND80lEfHaVB3fGT8CQEF7e9Lw== `  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: atip-support@lixar.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class DepartmentRecommendation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'department': 'str',
        'relevance': 'float'
    }

    attribute_map = {
        'department': 'department',
        'relevance': 'relevance'
    }

    def __init__(self, department=None, relevance=None):  # noqa: E501
        """DepartmentRecommendation - a model defined in Swagger"""  # noqa: E501

        self._department = None
        self._relevance = None
        self.discriminator = None

        if department is not None:
            self.department = department
        if relevance is not None:
            self.relevance = relevance

    @property
    def department(self):
        """Gets the department of this DepartmentRecommendation.  # noqa: E501

        The recommended department  # noqa: E501

        :return: The department of this DepartmentRecommendation.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this DepartmentRecommendation.

        The recommended department  # noqa: E501

        :param department: The department of this DepartmentRecommendation.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def relevance(self):
        """Gets the relevance of this DepartmentRecommendation.  # noqa: E501

        0 = not relevant, 100 = totally relevant   # noqa: E501

        :return: The relevance of this DepartmentRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this DepartmentRecommendation.

        0 = not relevant, 100 = totally relevant   # noqa: E501

        :param relevance: The relevance of this DepartmentRecommendation.  # noqa: E501
        :type: float
        """
        if relevance is not None and relevance > 100.0:  # noqa: E501
            raise ValueError("Invalid value for `relevance`, must be a value less than or equal to `100.0`")  # noqa: E501
        if relevance is not None and relevance < 0:  # noqa: E501
            raise ValueError("Invalid value for `relevance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._relevance = relevance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepartmentRecommendation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
