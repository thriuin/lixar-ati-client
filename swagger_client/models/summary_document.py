# coding: utf-8

"""
    ATIP AI Search API

    This API provides AI search functionalities: summary search and department recommendation.    Use the following code to authorize: ` nTsVPfUb89Ize/1DVSx2xKjLltOagND80lEfHaVB3fGT8CQEF7e9Lw== `  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: atip-support@lixar.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class SummaryDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pages': 'int',
        'owner_org_title': 'str',
        'request_number': 'str',
        'owner_org': 'str',
        'month': 'int',
        'year': 'int',
        'summary_en': 'str',
        'summary_fr': 'str',
        'disposition': 'str',
        'id': 'str',
        'version_': 'int'
    }

    attribute_map = {
        'pages': 'pages',
        'owner_org_title': 'owner_org_title',
        'request_number': 'request_number',
        'owner_org': 'owner_org',
        'month': 'month',
        'year': 'year',
        'summary_en': 'summary_en',
        'summary_fr': 'summary_fr',
        'disposition': 'disposition',
        'id': 'id',
        'version_': '_version_'
    }

    def __init__(self, pages=None, owner_org_title=None, request_number=None, owner_org=None, month=None, year=None, summary_en=None, summary_fr=None, disposition=None, id=None, version_=None):  # noqa: E501
        """SummaryDocument - a model defined in Swagger"""  # noqa: E501

        self._pages = None
        self._owner_org_title = None
        self._request_number = None
        self._owner_org = None
        self._month = None
        self._year = None
        self._summary_en = None
        self._summary_fr = None
        self._disposition = None
        self._id = None
        self._version_ = None
        self.discriminator = None

        if pages is not None:
            self.pages = pages
        if owner_org_title is not None:
            self.owner_org_title = owner_org_title
        if request_number is not None:
            self.request_number = request_number
        if owner_org is not None:
            self.owner_org = owner_org
        if month is not None:
            self.month = month
        if year is not None:
            self.year = year
        if summary_en is not None:
            self.summary_en = summary_en
        if summary_fr is not None:
            self.summary_fr = summary_fr
        if disposition is not None:
            self.disposition = disposition
        if id is not None:
            self.id = id
        if version_ is not None:
            self.version_ = version_

    @property
    def pages(self):
        """Gets the pages of this SummaryDocument.  # noqa: E501

        Total pages in the ATIP report  # noqa: E501

        :return: The pages of this SummaryDocument.  # noqa: E501
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this SummaryDocument.

        Total pages in the ATIP report  # noqa: E501

        :param pages: The pages of this SummaryDocument.  # noqa: E501
        :type: int
        """

        self._pages = pages

    @property
    def owner_org_title(self):
        """Gets the owner_org_title of this SummaryDocument.  # noqa: E501


        :return: The owner_org_title of this SummaryDocument.  # noqa: E501
        :rtype: str
        """
        return self._owner_org_title

    @owner_org_title.setter
    def owner_org_title(self, owner_org_title):
        """Sets the owner_org_title of this SummaryDocument.


        :param owner_org_title: The owner_org_title of this SummaryDocument.  # noqa: E501
        :type: str
        """

        self._owner_org_title = owner_org_title

    @property
    def request_number(self):
        """Gets the request_number of this SummaryDocument.  # noqa: E501

        ATIP request number  # noqa: E501

        :return: The request_number of this SummaryDocument.  # noqa: E501
        :rtype: str
        """
        return self._request_number

    @request_number.setter
    def request_number(self, request_number):
        """Sets the request_number of this SummaryDocument.

        ATIP request number  # noqa: E501

        :param request_number: The request_number of this SummaryDocument.  # noqa: E501
        :type: str
        """

        self._request_number = request_number

    @property
    def owner_org(self):
        """Gets the owner_org of this SummaryDocument.  # noqa: E501

        Organization that generated the report  # noqa: E501

        :return: The owner_org of this SummaryDocument.  # noqa: E501
        :rtype: str
        """
        return self._owner_org

    @owner_org.setter
    def owner_org(self, owner_org):
        """Sets the owner_org of this SummaryDocument.

        Organization that generated the report  # noqa: E501

        :param owner_org: The owner_org of this SummaryDocument.  # noqa: E501
        :type: str
        """

        self._owner_org = owner_org

    @property
    def month(self):
        """Gets the month of this SummaryDocument.  # noqa: E501

        Month in which the report was processed  # noqa: E501

        :return: The month of this SummaryDocument.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this SummaryDocument.

        Month in which the report was processed  # noqa: E501

        :param month: The month of this SummaryDocument.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def year(self):
        """Gets the year of this SummaryDocument.  # noqa: E501

        Year in hich the report was proccecssed  # noqa: E501

        :return: The year of this SummaryDocument.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SummaryDocument.

        Year in hich the report was proccecssed  # noqa: E501

        :param year: The year of this SummaryDocument.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def summary_en(self):
        """Gets the summary_en of this SummaryDocument.  # noqa: E501

        Report summary in 'English'  # noqa: E501

        :return: The summary_en of this SummaryDocument.  # noqa: E501
        :rtype: str
        """
        return self._summary_en

    @summary_en.setter
    def summary_en(self, summary_en):
        """Sets the summary_en of this SummaryDocument.

        Report summary in 'English'  # noqa: E501

        :param summary_en: The summary_en of this SummaryDocument.  # noqa: E501
        :type: str
        """

        self._summary_en = summary_en

    @property
    def summary_fr(self):
        """Gets the summary_fr of this SummaryDocument.  # noqa: E501

        Report summary in 'French'  # noqa: E501

        :return: The summary_fr of this SummaryDocument.  # noqa: E501
        :rtype: str
        """
        return self._summary_fr

    @summary_fr.setter
    def summary_fr(self, summary_fr):
        """Sets the summary_fr of this SummaryDocument.

        Report summary in 'French'  # noqa: E501

        :param summary_fr: The summary_fr of this SummaryDocument.  # noqa: E501
        :type: str
        """

        self._summary_fr = summary_fr

    @property
    def disposition(self):
        """Gets the disposition of this SummaryDocument.  # noqa: E501


        :return: The disposition of this SummaryDocument.  # noqa: E501
        :rtype: str
        """
        return self._disposition

    @disposition.setter
    def disposition(self, disposition):
        """Sets the disposition of this SummaryDocument.


        :param disposition: The disposition of this SummaryDocument.  # noqa: E501
        :type: str
        """

        self._disposition = disposition

    @property
    def id(self):
        """Gets the id of this SummaryDocument.  # noqa: E501


        :return: The id of this SummaryDocument.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SummaryDocument.


        :param id: The id of this SummaryDocument.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version_(self):
        """Gets the version_ of this SummaryDocument.  # noqa: E501


        :return: The version_ of this SummaryDocument.  # noqa: E501
        :rtype: int
        """
        return self._version_

    @version_.setter
    def version_(self, version_):
        """Sets the version_ of this SummaryDocument.


        :param version_: The version_ of this SummaryDocument.  # noqa: E501
        :type: int
        """

        self._version_ = version_

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
